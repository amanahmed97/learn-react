{"version":3,"sources":["assets/cross-icon.svg","assets/plus-icon.svg","components/Button/index.tsx","constants/constants.ts","components/NewEntrySheet/index.tsx","components/TaskList/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","props","color","customClassName","btnProps","className","children","taskTypes","NewEntrySheet","React","task","setTask","hours","setHours","minutes","setMinutes","remarks","setRemarks","onClick","onClose","autoFocus","src","crossIcon","alt","onChange","event","target","value","map","type","placeholder","entry","hrs","window","localStorage","getItem","hrc","JSON","parse","parseInt","setItem","mins","minc","onAdd","TaskList","entries","onRemove","TaskCard","App","useState","isEntrySheetOpen","setIsEntrySheetOpen","closeEntrySheet","entriesString","getTaskEntries","hr","time","min","style","width","length","addIcon","existingTasksString","existingTasks","newTasks","stringify","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5f4c7018.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cross-icon.2d0251cb.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus-icon.2d16fe04.svg\";","import * as React from 'react';\nimport './styles.scss';\nimport { ButtonHTMLAttributes } from 'react';\n\ninterface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n    color: 'primary' | 'secondary' | 'disabled';\n    customClassName?: string;\n}\n\nexport const Button: React.FC<ButtonProps> = (props: ButtonProps) => {\n    const { color, customClassName, ...btnProps } = props;\n    return (\n        <button className={`btn btn--${color} ${customClassName || ''}`} {...btnProps}>\n            {props.children}\n        </button>\n    );\n};\n","export const storageKey = 'tasks';\nexport const taskTypes = ['Development', 'Testing', 'Meeting', 'Deployment'];\n","/**\n * @author: Tejas Upmanyu (@tejasupmanyu)\n * NewEntrySheet Component - Renders action sheet for adding new entry.\n */\nimport * as React from 'react';\nimport './styles.scss';\nimport crossIcon from '../../assets/cross-icon.svg';\nimport { Button } from '../Button';\nimport { taskTypes } from '../../constants/constants';\n\ninterface INewEntrySheet {\n    onClose: () => void;\n    onAdd: (entry: IEntry) => void;\n}\n\nexport interface IEntry {\n    task: string;\n    hours: string;\n    minutes: string;\n    remarks: string;\n    //onDelete: () => void;\n    //onClose: () => void;\n}\n\nexport const NewEntrySheet: React.FC<INewEntrySheet> = (props: INewEntrySheet) => {\n    const [task, setTask] = React.useState(taskTypes[0]);\n    const [hours, setHours] = React.useState('');\n    const [minutes, setMinutes] = React.useState('');\n    const [remarks, setRemarks] = React.useState('');\n    //const [enable,setEnable] = React.useState(true);\n\n    const onTaskChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setTask(event.target.value);\n    };\n\n    const onHoursChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setHours(event.target.value);\n    };\n\n    const onMinutesChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setMinutes(event.target.value);\n    };\n\n    const onRemarksChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setRemarks(event.target.value);\n    };\n\n    const onAddEntry = () => {\n        const entry: IEntry = { task, hours, minutes, remarks };\n        //Set total hours count\n        let hrs = window.localStorage.getItem('hrs');\n        let hrc = hrs ? JSON.parse(hrs) : [];\n        hrc = hrc + parseInt(hours);\n        window.localStorage.setItem('hrs',hrc);\n        //Set total minutes count\n        let mins = window.localStorage.getItem('mins');\n        let minc = mins ? JSON.parse(mins) : [];\n        minc = minc + parseInt(minutes);\n        window.localStorage.setItem('mins',minc);\n        //Check to enable button entry\n        if(entry.task!=\"\" && entry.hours!=\"\" && entry.minutes!=\"\" && entry.remarks!=\"\")\n            props.onAdd(entry);\n    };\n\n    return (\n        <div className=\"new-entry-sheet\">\n            <div className=\"sheet-header\">\n                <div className=\"sheet-title\">\n                    <span className=\"title\">Add New Entry</span>\n                </div>\n                <button className=\"close-sheet-btn\" onClick={props.onClose} autoFocus>\n                    <img src={crossIcon} alt=\"close\" className=\"close-icon\" />\n                </button>\n            </div>\n            <div className=\"sheet-body\">\n                <div className=\"row\">\n                    <label className=\"task-input\">\n                        Task Type\n                        <select className=\"task-select\" onChange={onTaskChange} value={task}>\n                            {taskTypes.map((task: string) => (\n                                <option value={task}>{task}</option>\n                            ))}\n                        </select>\n                    </label>\n                    <label className=\"time-input\">\n                        Time Spent\n                        <div className=\"time-input-fields\">\n                            <div>\n                                <input\n                                    type=\"number\"\n                                    placeholder=\"hours\"\n                                    className=\"hour-input\"\n                                    onChange={onHoursChange}\n                                    value={hours}\n                                />\n                                <span className=\"time-indicator\">h</span>\n                            </div>\n                            <div>\n                                <input\n                                    type=\"number\"\n                                    placeholder=\"minutes\"\n                                    className=\"minute-input\"\n                                    onChange={onMinutesChange}\n                                    value={minutes}\n                                />\n                                <span className=\"time-indicator\">m</span>\n                            </div>\n                        </div>    \n                    </label>    \n                </div>\n                <div>\n                    <label>\n                        Remarks\n                        <br></br>\n                        <input type=\"text\" className=\"remarks-input\" placeholder=\"Remarks\" value={remarks} onChange={onRemarksChange}/>            \n                    </label>\n                </div>\n            </div>\n            <div className=\"sheet-footer\">\n                <div className=\"action-group\">\n                    <Button color=\"primary\" onClick={onAddEntry}>\n                        Add Entry\n                    </Button>\n                </div>\n            </div>\n        </div>\n    );\n};\n","/**\n * @author: Tejas Upmanyu (@tejasupmanyu)\n * TaskList Component - Renders list of task cards of all the tasks entered in timesheet.\n */\nimport * as React from 'react';\nimport './styles.scss';\nimport { IEntry } from '../NewEntrySheet';\nimport crossIcon from '../../assets/cross-icon.svg';\nimport { storageKey } from '../../constants/constants';\n\n\ninterface ITaskListProps {\n    entries: IEntry[];\n    onRemove: (entry : IEntry) => void;\n    /*\n    enables : boolean;\n    onClose: () => {};\n    */\n}\ninterface ITaskCardProps {\n    entry: IEntry;\n    onRemove: (entry : IEntry) => void;\n    /*\n    enable: boolean;\n    onClose: () => {enable:false;};\n    */\n}\n\nexport const TaskList: React.FC<ITaskListProps> = (props: ITaskListProps) => {\n    const { entries } = props;\n    /*\n    const onRemoveCard = (entry:IEntry) => {\n        const existingTasks = window.localStorage.getItem(storageKey);\n        const newTasks = entries.filter(newEntry => (\n            !(newEntry.task==entry.task && newEntry.hours==entry.hours && newEntry.hours==entry.minutes && newEntry.remarks==entry.remarks)\n        ));\n    \n        window.localStorage.setItem(storageKey, JSON.stringify(newTasks));\n    \n    }\n    */\n    const onRemoveCard = (entry:IEntry) => {\n        const existingTasksString = window.localStorage.getItem(storageKey);\n        //const newEntry : IEntry;\n        /*\n        if(existingTasksString){\n        const existingTasks = JSON.parse(existingTasksString);\n        const newTasks = existingTasks.filter(newEntry => (\n            !(newEntry.task==entry.task && newEntry.hours==entry.hours && newEntry.hours==entry.minutes && newEntry.remarks==entry.remarks)\n        ));\n            \n        window.localStorage.setItem(storageKey, JSON.stringify(newTasks));\n        }//if    \n        */\n    }\n\n\n    return (\n        <div className=\"task-list\">\n            {entries.map((entry: IEntry) => (\n                <TaskCard entry={entry} onRemove={props.onRemove}/> //{onRemoveCard}\n            ))}\n        </div>\n    );\n};\n\n/*<button className=\"close-sheet-btn\" onClick={props.onClose} autoFocus>\n                    <img src={crossIcon} alt=\"close\" className=\"close-icon\" />\n  </button>\n  <button className=\"close-sheet-btn\"  onClick={(entry)=>{entry.stopPropagation();entry.preventDefault();entry.triggerDelete(task, index);}} autoFocus>\n                    <img src={crossIcon} alt=\"close\" className=\"close-icon\" />\n  </button> \n*/\n// changed e to entry in close button onClick\n\nconst TaskCard: React.FC<ITaskCardProps> = (props: ITaskCardProps) => {\n    const {\n        entry: { task, hours, minutes, remarks },\n    } = props;\n    /*\n    const onRemoveCard: () => {\n        const entry:IEntry = props;\n        \n        props.onRemove(entry);\n    }  \n    onClick={onRemoveCard}\n    */\n\n    return (\n        <div className=\"task-card\">\n            <div className=\"close-header\">\n            <button className=\"close-out\">\n            <img src={crossIcon} className=\"close-btn\" alt=\"close\" />\n            </button>\n            </div>\n            <div className=\"task-head\">\n            <div className=\"task-title\">{task}</div> \n            <div className=\"task-time\">{`${hours}h ${minutes}m`} </div>\n            </div>\n             \n            <div>\n            <p className=\"remarks\">{remarks}</p>    \n            </div>     \n        </div>\n        \n    );\n};\n","/**\n * @author: Tejas Upmanyu (@tejasupmanyu)\n * App Component\n */\nimport React from 'react';\nimport './App.scss';\nimport addIcon from './assets/plus-icon.svg';\nimport { NewEntrySheet, IEntry } from './components/NewEntrySheet';\nimport { TaskList } from './components/TaskList';\nimport { storageKey } from './constants/constants';\n\nconst App: React.FC = () => {\n    const [isEntrySheetOpen, setIsEntrySheetOpen] = React.useState(false);\n\n    const openEntrySheet = () => {\n        setIsEntrySheetOpen(true);\n    };\n\n    const closeEntrySheet = () => {\n        setIsEntrySheetOpen(false);\n    };\n\n    const onAddEntry = (entry: IEntry) => {\n        const existingTasksString = window.localStorage.getItem(storageKey);\n        if (existingTasksString) {\n            const existingTasks = JSON.parse(existingTasksString);\n            const newTasks = [...existingTasks, entry];\n            window.localStorage.setItem(storageKey, JSON.stringify(newTasks));\n        } else {\n            window.localStorage.setItem(storageKey, JSON.stringify([entry]));\n        }\n        closeEntrySheet();\n    };\n    /*\n    const onDeleteEntry = (entry : IEntry) => {\n        entry : null;\n    }\n    */\n    const getTaskEntries = () => {\n        /* Use to reset\n        window.localStorage.setItem(storageKey,\"\"); \n        window.localStorage.setItem('hrs','0');\n        window.localStorage.setItem('mins','0');\n        */\n        const entriesString = window.localStorage.getItem(storageKey);\n        const entries = entriesString ? JSON.parse(entriesString) : [];\n        return entries;\n    };\n\n    const entries = getTaskEntries();\n    \n    //calculate the time\n    let hrs = window.localStorage.getItem('hrs');\n    let hr = hrs ? JSON.parse(hrs) : [];\n    hr = hr * 1;\n    let mins = window.localStorage.getItem('mins');\n    let min = mins ? JSON.parse(mins) : [];\n    min = min * 1;//added this to display min\n    let time : number;\n    time = hr * 60 + min;\n    time = (time/(8*60)) * 100;\n    //console.log(\"HI\"+{time});\n\n    return (\n        <div className=\"app-container\">\n\n            <div className=\"outbar\">\n                {   \n                    time < 50  ? <div className=\"red-bar\" style={{width:time+'%'}}>&nbsp;</div> : \n                    (time < 100 ? <div className=\"orange-bar\" style={{width:time+'%'}}>&nbsp;</div> :\n                    <div className=\"green-bar\" style={{width:time+'%'}}>&nbsp;</div>) \n                    \n                } \n                    {/* ; */}  \n            </div>\n            {/*<h4>{time} {hr} {min}</h4>*/}\n            <h1>Timesheet</h1>\n            {entries.length > 0 ? (\n                <TaskList entries={entries} onRemove={entries}/> \n            ) : (\n                <p className=\"empty-text\">No entries yet. Add a new entry by clicking the + button.</p>\n            )}\n            <button className=\"floating-add-entry-btn\" onClick={openEntrySheet}>\n                <img className=\"add-icon\" src={addIcon} alt=\"add entry\" />\n            </button>\n            {isEntrySheetOpen && <NewEntrySheet onClose={closeEntrySheet} onAdd={onAddEntry} />}\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}