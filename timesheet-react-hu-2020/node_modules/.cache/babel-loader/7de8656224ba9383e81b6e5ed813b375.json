{"ast":null,"code":"import _slicedToArray from \"/home/aman_ahmed/apps/React/timesheet-react-hu-2020/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/aman_ahmed/apps/React/timesheet-react-hu-2020/src/App.tsx\";\n\n/**\n * @author: Tejas Upmanyu (@tejasupmanyu)\n * App Component\n */\nimport React from 'react';\nimport './App.scss';\nimport addIcon from \"./assets/plus-icon.svg\";\nimport { NewEntrySheet } from './components/NewEntrySheet';\nimport { TaskList } from './components/TaskList';\nimport { storageKey } from './constants/constants';\n\nconst App = () => {\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        isEntrySheetOpen = _React$useState2[0],\n        setIsEntrySheetOpen = _React$useState2[1];\n\n  const openEntrySheet = () => {\n    setIsEntrySheetOpen(true);\n  };\n\n  const closeEntrySheet = () => {\n    setIsEntrySheetOpen(false);\n  };\n\n  const onAddEntry = entry => {\n    const existingTasksString = window.localStorage.getItem(storageKey);\n\n    if (existingTasksString) {\n      const existingTasks = JSON.parse(existingTasksString);\n      const newTasks = [...existingTasks, entry];\n      window.localStorage.setItem(storageKey, JSON.stringify(newTasks));\n    } else {\n      window.localStorage.setItem(storageKey, JSON.stringify([entry]));\n    }\n\n    closeEntrySheet();\n  };\n  /*\n  const onDeleteEntry = (entry : IEntry) => {\n      entry : null;\n  }\n  */\n\n\n  const getTaskEntries = () => {\n    const entriesString = window.localStorage.getItem(storageKey);\n    const entries = entriesString ? JSON.parse(entriesString) : [];\n    return entries;\n  };\n\n  const entries = getTaskEntries();\n  return React.createElement(\"div\", {\n    className: \"app-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"progress\", {\n    value: \"33\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  })), React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Timesheet\"), entries.length > 0 ? React.createElement(TaskList, {\n    entries: entries,\n    onRemove: entries,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }) : React.createElement(\"p\", {\n    className: \"empty-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"No entries yet. Add a new entry by clicking the + button.\"), React.createElement(\"button\", {\n    className: \"floating-add-entry-btn\",\n    onClick: openEntrySheet,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: \"add-icon\",\n    src: addIcon,\n    alt: \"add entry\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  })), isEntrySheetOpen && React.createElement(NewEntrySheet, {\n    onClose: closeEntrySheet,\n    onAdd: onAddEntry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/aman_ahmed/apps/React/timesheet-react-hu-2020/src/App.tsx"],"names":["React","NewEntrySheet","TaskList","storageKey","App","useState","isEntrySheetOpen","setIsEntrySheetOpen","openEntrySheet","closeEntrySheet","onAddEntry","entry","existingTasksString","window","localStorage","getItem","existingTasks","JSON","parse","newTasks","setItem","stringify","getTaskEntries","entriesString","entries","length","addIcon"],"mappings":";;;AAAA;;;;AAIA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,YAAP;;AAEA,SAASC,aAAT,QAAsC,4BAAtC;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,UAAT,QAA2B,uBAA3B;;AAEA,MAAMC,GAAa,GAAG,MAAM;AAAA,0BACwBJ,KAAK,CAACK,QAAN,CAAe,KAAf,CADxB;AAAA;AAAA,QACjBC,gBADiB;AAAA,QACCC,mBADD;;AAGxB,QAAMC,cAAc,GAAG,MAAM;AACzBD,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACH,GAFD;;AAIA,QAAME,eAAe,GAAG,MAAM;AAC1BF,IAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACH,GAFD;;AAIA,QAAMG,UAAU,GAAIC,KAAD,IAAmB;AAClC,UAAMC,mBAAmB,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BZ,UAA5B,CAA5B;;AACA,QAAIS,mBAAJ,EAAyB;AACrB,YAAMI,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWN,mBAAX,CAAtB;AACA,YAAMO,QAAQ,GAAG,CAAC,GAAGH,aAAJ,EAAmBL,KAAnB,CAAjB;AACAE,MAAAA,MAAM,CAACC,YAAP,CAAoBM,OAApB,CAA4BjB,UAA5B,EAAwCc,IAAI,CAACI,SAAL,CAAeF,QAAf,CAAxC;AACH,KAJD,MAIO;AACHN,MAAAA,MAAM,CAACC,YAAP,CAAoBM,OAApB,CAA4BjB,UAA5B,EAAwCc,IAAI,CAACI,SAAL,CAAe,CAACV,KAAD,CAAf,CAAxC;AACH;;AACDF,IAAAA,eAAe;AAClB,GAVD;AAWA;;;;;;;AAKA,QAAMa,cAAc,GAAG,MAAM;AACzB,UAAMC,aAAa,GAAGV,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BZ,UAA5B,CAAtB;AACA,UAAMqB,OAAO,GAAGD,aAAa,GAAGN,IAAI,CAACC,KAAL,CAAWK,aAAX,CAAH,GAA+B,EAA5D;AACA,WAAOC,OAAP;AACH,GAJD;;AAMA,QAAMA,OAAO,GAAGF,cAAc,EAA9B;AAEA,SACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAU,IAAA,KAAK,EAAC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJJ,EAKKE,OAAO,CAACC,MAAR,GAAiB,CAAjB,GACG,oBAAC,QAAD;AAAU,IAAA,OAAO,EAAED,OAAnB;AAA4B,IAAA,QAAQ,EAAEA,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,GAGG;AAAG,IAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEARR,EAUI;AAAQ,IAAA,SAAS,EAAC,wBAAlB;AAA2C,IAAA,OAAO,EAAEhB,cAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,GAAG,EAAEkB,OAA/B;AAAwC,IAAA,GAAG,EAAC,WAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAVJ,EAaKpB,gBAAgB,IAAI,oBAAC,aAAD;AAAe,IAAA,OAAO,EAAEG,eAAxB;AAAyC,IAAA,KAAK,EAAEC,UAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbzB,CADJ;AAiBH,CApDD;;AAsDA,eAAeN,GAAf","sourcesContent":["/**\n * @author: Tejas Upmanyu (@tejasupmanyu)\n * App Component\n */\nimport React from 'react';\nimport './App.scss';\nimport addIcon from './assets/plus-icon.svg';\nimport { NewEntrySheet, IEntry } from './components/NewEntrySheet';\nimport { TaskList } from './components/TaskList';\nimport { storageKey } from './constants/constants';\n\nconst App: React.FC = () => {\n    const [isEntrySheetOpen, setIsEntrySheetOpen] = React.useState(false);\n\n    const openEntrySheet = () => {\n        setIsEntrySheetOpen(true);\n    };\n\n    const closeEntrySheet = () => {\n        setIsEntrySheetOpen(false);\n    };\n\n    const onAddEntry = (entry: IEntry) => {\n        const existingTasksString = window.localStorage.getItem(storageKey);\n        if (existingTasksString) {\n            const existingTasks = JSON.parse(existingTasksString);\n            const newTasks = [...existingTasks, entry];\n            window.localStorage.setItem(storageKey, JSON.stringify(newTasks));\n        } else {\n            window.localStorage.setItem(storageKey, JSON.stringify([entry]));\n        }\n        closeEntrySheet();\n    };\n    /*\n    const onDeleteEntry = (entry : IEntry) => {\n        entry : null;\n    }\n    */\n    const getTaskEntries = () => {\n        const entriesString = window.localStorage.getItem(storageKey);\n        const entries = entriesString ? JSON.parse(entriesString) : [];\n        return entries;\n    };\n\n    const entries = getTaskEntries();\n\n    return (\n        <div className=\"app-container\">\n            <div>\n                <progress value=\"33\"></progress>\n            </div>\n            <h1>Timesheet</h1>\n            {entries.length > 0 ? (\n                <TaskList entries={entries} onRemove={entries}/> \n            ) : (\n                <p className=\"empty-text\">No entries yet. Add a new entry by clicking the + button.</p>\n            )}\n            <button className=\"floating-add-entry-btn\" onClick={openEntrySheet}>\n                <img className=\"add-icon\" src={addIcon} alt=\"add entry\" />\n            </button>\n            {isEntrySheetOpen && <NewEntrySheet onClose={closeEntrySheet} onAdd={onAddEntry} />}\n        </div>\n    );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}