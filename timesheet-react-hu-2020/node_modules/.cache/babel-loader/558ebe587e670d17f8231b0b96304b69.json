{"ast":null,"code":"/**\n * @author: Tejas Upmanyu (@tejasupmanyu)\n * TaskList Component - Renders list of task cards of all the tasks entered in timesheet.\n */import*as React from'react';import'./styles.scss';import crossIcon from\"../../assets/cross-icon.svg\";import{storageKey}from'../../constants/constants';export var TaskList=function TaskList(props){var entries=props.entries;/*\n    const onRemoveCard = (entry:IEntry) => {\n        const existingTasks = window.localStorage.getItem(storageKey);\n        const newTasks = entries.filter(newEntry => (\n            !(newEntry.task==entry.task && newEntry.hours==entry.hours && newEntry.hours==entry.minutes && newEntry.remarks==entry.remarks)\n        ));\n    \n        window.localStorage.setItem(storageKey, JSON.stringify(newTasks));\n    \n    }\n    */var onRemoveCard=function onRemoveCard(entry){var existingTasksString=window.localStorage.getItem(storageKey);//const newEntry : IEntry;\n/*\n        if(existingTasksString){\n        const existingTasks = JSON.parse(existingTasksString);\n        const newTasks = existingTasks.filter(newEntry => (\n            !(newEntry.task==entry.task && newEntry.hours==entry.hours && newEntry.hours==entry.minutes && newEntry.remarks==entry.remarks)\n        ));\n            \n        window.localStorage.setItem(storageKey, JSON.stringify(newTasks));\n        }//if    \n        */};return React.createElement(\"div\",{className:\"task-list\"},entries.map(function(entry){return React.createElement(TaskCard,{entry:entry,onRemove:props.onRemove})//{onRemoveCard}\n;}));};/*<button className=\"close-sheet-btn\" onClick={props.onClose} autoFocus>\n                    <img src={crossIcon} alt=\"close\" className=\"close-icon\" />\n  </button>\n  <button className=\"close-sheet-btn\"  onClick={(entry)=>{entry.stopPropagation();entry.preventDefault();entry.triggerDelete(task, index);}} autoFocus>\n                    <img src={crossIcon} alt=\"close\" className=\"close-icon\" />\n  </button> \n*/ // changed e to entry in close button onClick\nvar TaskCard=function TaskCard(props){var _props$entry=props.entry,task=_props$entry.task,hours=_props$entry.hours,minutes=_props$entry.minutes,remarks=_props$entry.remarks;/*\n    const onRemoveCard: () => {\n        const entry:IEntry = props;\n        \n        props.onRemove(entry);\n    }  \n    onClick={onRemoveCard}\n    */return React.createElement(\"div\",{className:\"task-card\"},React.createElement(\"div\",{className:\"close-header\"},React.createElement(\"button\",{className:\"close-out\"},React.createElement(\"img\",{src:crossIcon,className:\"close-btn\",alt:\"close\"}))),React.createElement(\"div\",{className:\"task-head\"},React.createElement(\"div\",{className:\"task-title\"},task),React.createElement(\"div\",{className:\"task-time\"},\"\".concat(hours,\"h \").concat(minutes,\"m\"),\" \")),React.createElement(\"div\",null,React.createElement(\"p\",{className:\"remarks\"},remarks)));};","map":{"version":3,"sources":["/home/aman_ahmed/apps/React/timesheet-react-hu-2020/src/components/TaskList/index.tsx"],"names":["React","storageKey","TaskList","props","entries","onRemoveCard","entry","existingTasksString","window","localStorage","getItem","map","onRemove","TaskCard","task","hours","minutes","remarks","crossIcon"],"mappings":"AAAA;;;GAIA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,MAAO,eAAP,C,mDAGA,OAASC,UAAT,KAA2B,2BAA3B,CAoBA,MAAO,IAAMC,CAAAA,QAAkC,CAAG,QAArCA,CAAAA,QAAqC,CAACC,KAAD,CAA2B,IACjEC,CAAAA,OADiE,CACrDD,KADqD,CACjEC,OADiE,CAEzE;;;;;;;;;;MAWA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAkB,CACnC,GAAMC,CAAAA,mBAAmB,CAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BT,UAA5B,CAA5B,CACA;AACA;;;;;;;;;UAUH,CAbD,CAgBA,MACI,4BAAK,SAAS,CAAC,WAAf,EACKG,OAAO,CAACO,GAAR,CAAY,SAACL,KAAD,QACT,qBAAC,QAAD,EAAU,KAAK,CAAEA,KAAjB,CAAwB,QAAQ,CAAEH,KAAK,CAACS,QAAxC,EAAoD;AAD3C,EAAZ,CADL,CADJ,CAOH,CApCM,CAsCP;;;;;;GAOA;AAEA,GAAMC,CAAAA,QAAkC,CAAG,QAArCA,CAAAA,QAAqC,CAACV,KAAD,CAA2B,kBAG9DA,KAH8D,CAE9DG,KAF8D,CAErDQ,IAFqD,cAErDA,IAFqD,CAE/CC,KAF+C,cAE/CA,KAF+C,CAExCC,OAFwC,cAExCA,OAFwC,CAE/BC,OAF+B,cAE/BA,OAF+B,CAIlE;;;;;;;MASA,MACI,4BAAK,SAAS,CAAC,WAAf,EACI,2BAAK,SAAS,CAAC,cAAf,EACA,8BAAQ,SAAS,CAAC,WAAlB,EACA,2BAAK,GAAG,CAAEC,SAAV,CAAqB,SAAS,CAAC,WAA/B,CAA2C,GAAG,CAAC,OAA/C,EADA,CADA,CADJ,CAMI,2BAAK,SAAS,CAAC,WAAf,EACA,2BAAK,SAAS,CAAC,YAAf,EAA6BJ,IAA7B,CADA,CAEA,2BAAK,SAAS,CAAC,WAAf,YAA+BC,KAA/B,cAAyCC,OAAzC,UAFA,CANJ,CAWI,+BACA,yBAAG,SAAS,CAAC,SAAb,EAAwBC,OAAxB,CADA,CAXJ,CADJ,CAkBH,CA/BD","sourcesContent":["/**\n * @author: Tejas Upmanyu (@tejasupmanyu)\n * TaskList Component - Renders list of task cards of all the tasks entered in timesheet.\n */\nimport * as React from 'react';\nimport './styles.scss';\nimport { IEntry } from '../NewEntrySheet';\nimport crossIcon from '../../assets/cross-icon.svg';\nimport { storageKey } from '../../constants/constants';\n\n\ninterface ITaskListProps {\n    entries: IEntry[];\n    onRemove: (entry : IEntry) => void;\n    /*\n    enables : boolean;\n    onClose: () => {};\n    */\n}\ninterface ITaskCardProps {\n    entry: IEntry;\n    onRemove: (entry : IEntry) => void;\n    /*\n    enable: boolean;\n    onClose: () => {enable:false;};\n    */\n}\n\nexport const TaskList: React.FC<ITaskListProps> = (props: ITaskListProps) => {\n    const { entries } = props;\n    /*\n    const onRemoveCard = (entry:IEntry) => {\n        const existingTasks = window.localStorage.getItem(storageKey);\n        const newTasks = entries.filter(newEntry => (\n            !(newEntry.task==entry.task && newEntry.hours==entry.hours && newEntry.hours==entry.minutes && newEntry.remarks==entry.remarks)\n        ));\n    \n        window.localStorage.setItem(storageKey, JSON.stringify(newTasks));\n    \n    }\n    */\n    const onRemoveCard = (entry:IEntry) => {\n        const existingTasksString = window.localStorage.getItem(storageKey);\n        //const newEntry : IEntry;\n        /*\n        if(existingTasksString){\n        const existingTasks = JSON.parse(existingTasksString);\n        const newTasks = existingTasks.filter(newEntry => (\n            !(newEntry.task==entry.task && newEntry.hours==entry.hours && newEntry.hours==entry.minutes && newEntry.remarks==entry.remarks)\n        ));\n            \n        window.localStorage.setItem(storageKey, JSON.stringify(newTasks));\n        }//if    \n        */\n    }\n\n\n    return (\n        <div className=\"task-list\">\n            {entries.map((entry: IEntry) => (\n                <TaskCard entry={entry} onRemove={props.onRemove}/> //{onRemoveCard}\n            ))}\n        </div>\n    );\n};\n\n/*<button className=\"close-sheet-btn\" onClick={props.onClose} autoFocus>\n                    <img src={crossIcon} alt=\"close\" className=\"close-icon\" />\n  </button>\n  <button className=\"close-sheet-btn\"  onClick={(entry)=>{entry.stopPropagation();entry.preventDefault();entry.triggerDelete(task, index);}} autoFocus>\n                    <img src={crossIcon} alt=\"close\" className=\"close-icon\" />\n  </button> \n*/\n// changed e to entry in close button onClick\n\nconst TaskCard: React.FC<ITaskCardProps> = (props: ITaskCardProps) => {\n    const {\n        entry: { task, hours, minutes, remarks },\n    } = props;\n    /*\n    const onRemoveCard: () => {\n        const entry:IEntry = props;\n        \n        props.onRemove(entry);\n    }  \n    onClick={onRemoveCard}\n    */\n\n    return (\n        <div className=\"task-card\">\n            <div className=\"close-header\">\n            <button className=\"close-out\">\n            <img src={crossIcon} className=\"close-btn\" alt=\"close\" />\n            </button>\n            </div>\n            <div className=\"task-head\">\n            <div className=\"task-title\">{task}</div> \n            <div className=\"task-time\">{`${hours}h ${minutes}m`} </div>\n            </div>\n             \n            <div>\n            <p className=\"remarks\">{remarks}</p>    \n            </div>     \n        </div>\n        \n    );\n};\n"]},"metadata":{},"sourceType":"module"}